#!/bin/bash
# shellcheck disable=SC2016
# SC2016 Expressions don't expand in single quotes ('```')

##### license LPRAB/WTFPL
#  auteur: sdeb
#    contributeurs: kyodev
#####

version=1.5
script="nstest"
date="01/06/2018"
#~ contact="irc:freenode.net##sdeb"

if ! command -v sort > /dev/null; then
	echo -e "'sort' not found, install coreutils if you want a sorted report\\n"
fi
if command -v dig > /dev/null; then
	dig=dig
elif command -v drill > /dev/null; then
	dig=drill
	echo -e "'dill' is terribly slower (no management timeout), for frequent use, install dig (dnsutils) \\n"
else
	echo "dig (and drill) not found,  install it with dnsutils"
	exit 1
fi

	# assign ${nameservers[@]} ${dns[@]} 
assign_variables(){		# 31/05/2018
			# NO SPACE in service name, if not `sort` will fail
	dns=(
		'176.103.130.130 # adguard'
		'23.253.163.53 # alternate_dns'
		'185.228.168.168 # cleanbrowsing'
		'1.1.1.1 # cloudflare'
		'8.26.56.26 # comodo'
		'84.200.69.80 # dns_watch'
		'216.146.35.35 # dyn_oracle'
		'37.235.1.174 # freedns'
		'80.80.80.80 # freenom'
		'8.8.8.8 # google'
		'209.244.0.3 # level3'
		'156.154.70.1 # neustar'
		'199.85.126.10 # norton'
		'208.67.222.222 # opendns'
		'9.9.9.9 # quad9'
		'91.239.100.100 # uncensoredDNS'
		'64.6.64.6 # verisign '
		'77.88.8.8 # yandex'
			#~ fail 31/05/2018
		#~ '179.43.139.226 # Fourth_Estate_Zurich'
		#~ '81.218.119.11 # greenTeamDns'
		#~ '185.121.177.177 # openNic_anycast'	
		#~ '208.76.50.50 # smartViper'
	)
	dns6=(
		'2a00:5a60::ad1:0ff # adguard'
		'2a0d:2a00:1 # cleanbrowsing'
		'2606:4700:4700::1111 # cloudflare'
		'2001:1608:10:25::1c04:b12f # dns_watch'
		'2001:4860:4860::8888 # google'
		'2a05:dfc7:5::53 # openNic_anycast'
		'2610:a1:1018::1 # neustar'
		'22620:0:ccc::2 # opendns'
		'2620:fe::fe # quad9'
		'2001:67c:28a4:: # uncensoredDNS'
		'2620:74:1b::1:1 # verisign '
		'2a02:6b8::feed:0ff # yandex'
	)

	case "$testsarray" in
		alt )
			domains_test=(
				whois.biz
				pik.bzh
				www.coop
				lafibre.info
				github.io
				bmwgroup.jobs
				dotmobi.mobi
				do.tel
				france.tv
				gen.xyz
			) ;;
		atld )
			domains_test=(
				register.bbs
				opennic.chan
				opennic.cyb
				nic.fur
				rojaciwan.ku
				register.neo
				reg.null
				opennic.oz
				uptime.party 
				vtje.ti
			) ;;
		base )
			domains_test=(
				debian.org
				eurid.eu
				free.fr
				google.com 
				info.info
				kernel.org
				be.libre
				ovh.net
				packager.io
				transfer.sh
			) ;;
		easy )
			domains_test=(
				amazon.com
				facebook.com
				github.com
				gmail.com
				google.com
				reddit.com
				twitter.com
				whatsapp.com
				wikipedia.org
				youtube.com
			) ;;
	esac
	domains_qty=${#domains_test[@]}
}

	# $1 message to display
die(){		# 31/05/2018
	echo "  Fatal: $1"
	echo
	exit 1
}

	# détermination dirname et basename avec suivi lien éventuel, assigne $dirscript & $basescript
# shellcheck disable=SC2034
f__basedirname(){		# 27/04/2018

	dirscript=$( readlink -f "$0" )		# /path/from/root/scriptname (absolute path)
	basescript=${dirscript##*/}			# scriptname
	dirscript=${dirscript%/*}			# /path/from/root/
}

	# getTime : start count
	# getTime end : comptage fin, calcul fin - départ, affichage différence en ms
	# getTime end:sec : idem sauf affichage différence en s
	# getTime end:auto : idem sauf affichage différence en j, h, mn, s si diff > 10s
	# getTime affichage date en ms, sans unité, pour traitement externe à la fonction
	# lien utile: https://www.admin-linux.fr/conversion-des-timestamps-dates-au-format-unix-en-bash/
	# declare -g gTime
getTime(){	# 25/05/2018
	local date sec ms time2
	declare -g gTime
	date=$( date +%s.%N )	# s.ns timestamp.ns
	sec=${date%\.*}		# s
	ms=${date#*\.}		# ns
	ms=${ms::-6}		# ms
	if [[ "$*" =~ "end" ]]; then
		if [[ "$*" =~ "sec" ]]; then
			time2=$(( $sec$ms-gTime ))
			echo "${time2::-3}.${time2: -3} s"		# sec avec virgule
		elif [[ "$*" =~ "auto" ]] && (( ( $sec$ms-gTime ) >= 10000 )); then
			get_sec2day "$(( sec-${gTime::-3} ))"
		else
			echo "$(( $sec$ms-gTime )) ms"
		fi
	else
		gTime="$sec$ms"					# calcul sur ms
	fi
}

	# $1 temps en secondes, affiche conversion en jours, h, mn, s
get_sec2day(){		# 05/05/2018
	local j h mn sec display

	  j=$(( $1 / (24*3600) ))
	  h=$(( ($1 % (24*3600)) / 3600 ))
	 mn=$(( (($1 % (24*3600)) % 3600) / 60 ))
	sec=$(( (($1 % (24*3600)) % 3600) % 60 ))
	(( j != 0)) && display+="$j jours "
	(( h != 0)) && display+="$h h "
	(( mn != 0)) && display+="$mn mn "
	(( sec != 0)) && display+="$sec s "
	echo "${display% }"
}

	# assign ${nameservers[@]}
# shellcheck disable=SC2034
readingResolv(){		# 25/05/2018
	local a ip ns 

	unset nameservers
	if [ "$1" ]; then
		file="$1"
		while read -r ip ns; do 
			if [[ ! "$ip" =~ ^[[:blank:]]?# ]]; then
				if [ "$ns" ]; then
					nameservers+=( "$ip ${ns}" )
				else
					nameservers+=( "$ip # file" )
				fi
			fi
		done < "$1"
	else
		while read -r a ip ns; do 
			if [ "$a" == "nameserver" ]; then
				if [ "$ns" ]; then
					nameservers+=( "$ip ${ns}" )
				else
					nameservers+=( "$ip # resolv" )
				fi
			fi
		done < /etc/resolv.conf
	fi
}

	# $1 téléchargement déjà fait, assigne $online_version
script_get_version(){		# 01/06/2018
	local temp  

	if [ "$1" ]; then
		temp="$1"		# version fichier
	else
		! temp=$( curl --silent --show-error "$url_script" ) && die "error getting script online version"
	fi
	temp=${temp#*version=}
	read -r online_version <<< "$temp"
	[[ "${online_version:0:1}" =~ [0-9] ]] || online_version="${RED}n/a"
	[ "$1" ] && return 0
	echo -e "  online version: $GREEN$online_version$STD \\n"
}

script_upgrade(){		# 01/06/2018

	if [ ! -w "$dirscript/$script" ]; then
		[ "$EUID" -ne 0 ] && die "fatal error: the upgrade must be made in root"
	fi
	! curl --silent --show-error -o "/tmp/$script" "$url_script" && die "error loading script (curl $?)"
	if grep -q '^### END CONTROL' "/tmp/$script"; then 
		script_get_version "$( < "/tmp/$script" )"
		mv "/tmp/$script" "$dirscript/$script"
		chmod 775 "$dirscript/$script"
	else
		die "failure update, incomplete download"
	fi
	rm "/tmp/$script" 2>/dev/null
	echo
}

usage(){		# 01/06/2018
	local ns server_name allns alldns domains

	assign_variables
	[ -z "$noresolv" ] && readingResolv "$dnsfile"
	[[ -z "$noresolv" && -z "$dnsfile" ]] && dnsfile="resolv.conf"
	for ns in "${nameservers[@]}"; do
		server_name=${ns#*#[[:blank:]]}
		[[ "$server_name" =~ \# ]] && server_name=${ns#*#}
		allns+="$server_name | "
	done
	allns=${allns::-2}
	for ns in "${dns[@]}"; do ns=${ns#*# }; alldns+="$ns | "; done 
	alldns=${alldns::-2}
	for domain in "${domains_test[@]}"; do domains+="$domain | "; done
	domains=${domains::-2}
	cat <<- end
	  usage:  ${BLUE}$script [options]${STD}

	${BLUE}        --bench   ${STD}: run with all lists of domains to test
	${BLUE}        --dev     ${STD}: use dev branch for update or for version number
	${BLUE}        --drill   ${STD}: drill is forced if existing, otherwise dig has priority 
	${BLUE}    -e, --export  ${STD}: export on a pastebin
	${BLUE}    -c, --compress${STD}: no extended report, only time averages
	${BLUE}    -d, --domains ${STD}: choice between 3 test domain lists: base (defaut), alt, atld, or easy 
	${BLUE}    -f, --file    ${STD}: the ip in <file> are tested, replace /etc/resolv.conf. format: ip[ # name] per line
	${BLUE}        --nodns   ${STD}: only the nameservers in /etc/resolv.conf or in <file> are tested, no other dns servers used 
	${BLUE}        --noresolv${STD}: the file /etc/resolv.conf is not read, implied with --file
	${BLUE}        --nosort  ${STD}: no sorted report on average column
	${BLUE}        --opt     ${STD}: print list of dns servers and domains for tests
	${BLUE}    -h, --help    ${STD}: this help
	${BLUE}    -u, --upgrade ${STD}: load and replace the script in place
	${BLUE}    -v, --version ${STD}: version of the script online and in place

	  examples:
	${BLUE}      ./ntest                    ${STD}: full report, with nameservers in /etc/resolv.conf and few open DNS servers
	${BLUE}      ./ntest --nodns --compress ${STD}: report with only averages with only nameservers in /etc/resolv.conf
	${BLUE}      ./ntest -e  --noresolv     ${STD}: export on a pastebin, to exchange a test
	${BLUE}      ./ntest --noresolv -d easy ${STD}: full report, with domains to test easy, performances are better (responses in cache DNS)
	${BLUE}      ./ntest -h  -d alt         ${STD}: this help, with domain list alt(ernative)

	  dns servers: 
	${GREEN}      $alldns${STD}
	end
	[ "$allns" ] && echo "${BLUE}      ($dnsfile) $allns${STD}"
	cat <<- end
	  test domains (${RED}'$testsarray'${STD} list): 
	      ${BLUE}$domains${STD}

	  more info: ${GREEN}$url_notice${STD}

	end
}

# shellcheck disable=SC1117
usage_version(){		# 01/06/2018

	if type -p tput &>/dev/null && tput setaf 1 &>/dev/null; then
		  GREEN=$( tput setaf 2 )		# ok
		   BLUE=$( tput setaf 4 )		# info
			RED=$( tput setaf 1 )		# alerte
			STD=$( tput sgr0 )			# retour "normal"
	else 
		 GREEN=$'\033[0;32m'		# ok
		  BLUE=$'\033[0;34m'		# info
		   RED=$'\033[0;31m'		# alerte
		   STD=$'\033[0m'			# standard
	fi

	cat <<- end
	             _            _   
	   _ __  ___| |_ ___  ___| |_ 
	  | '_ \/ __| __/ _ \/ __| __|
	  | | | \__ \ ||  __/\__ \ |_ 
	  |_| |_|___/\__\___||___/\__| $script_options
	        version: $GREEN$version $date$STD
	
	end
}

z_core(){		# 31/05/2018
	local ns server_ip server_name width wcol margin header xyz domain line time_sum counter counterNotFound notfound 
	local time time_sum average unit report footer output ligneRapport 

	if [ -z "$noresolv" ]; then
		readingResolv "$dnsfile"
	fi
	assign_variables "$testsarray"
	[ "$nodns" ] && unset dns
	if [ "$drilltest" ] && command -v drill > /dev/null; then
		dig=drill
	fi

		# first column width 
	for ns in "${nameservers[@]}" "${dns[@]}"; do
		server_ip=${ns%[[:blank:]]#*}
		server_name=${ns#*#[[:blank:]]}
		[[ "$server_name" =~ \# ]] && server_name=${ns#*#}
		(( ( ${#server_ip} + ${#server_name} + 4 ) >= width )) && width=$(( ${#server_ip} + ${#server_name} + 4 ))
	done

	wcol=8
	margin="  "
		# report header
	header=$( printf "${margin}%-${width}s" "" )
	if [ -z "$compress" ]; then
		xyz=1
		for domain in "${domains_test[@]}"; do
			header+=$( printf "%-${wcol}s" "$xyz:${domain#*.}" )
			(( xyz++ ))
		done
	fi
	header+=$( printf "%$(( wcol + 3 ))s\\n" "Average" )

		# report's lines
	for ns in "${nameservers[@]}" "${dns[@]}"; do
		server_ip=${ns%[[:blank:]]#*}
		server_name=${ns#*#[[:blank:]]}
		[[ "$server_name" =~ \# ]] && server_name=${ns#*#}
		printf "\\r  %40s" " "
		printf "\\r  %s " "$server_name"
		line=$( printf "${margin}%-${width}s" "$server_name ($server_ip)" )

		time_sum=0
		counter=0
		counterNotFound=0
		for domain in "${domains_test[@]}"; do
			printf .
			if [ "$dig" == "dig" ]; then
				! time=$( LC_ALL=C $dig +tries=1 +timeout=1 +stats @"$server_ip" "$domain" 2>/dev/null ) && time="n/a"
			elif [ "$dig" == "drill" ]; then
				! time=$( LC_ALL=C drill  @"$server_ip" "$domain" 2>/dev/null ) && time="n/a"
			fi
			if [ "$time" != 'n/a' ] ; then
				[[ "${time,,}" =~ ^.*flags:.*answer:\ 0 ]] && notfound="yes" || notfound=""
				if [[ "${time,,}" =~ ^.*query\ time:\ ([0-9].*)\ msec  ]]; then
					time="${BASH_REMATCH[1]}"
					time_sum=$(( time_sum + time ))
					(( counter++ ))
				fi
				if [ "$notfound" ]; then
					time="-$time"
					(( counterNotFound++ ))
				fi
			fi
			if [ -z "$compress" ]; then
				line+=$( printf "%-${wcol}s" "$time" )
			fi
		done
		if (( counter != 0 )); then
			average=$(( time_sum * 100  / counter ))
			average=${average::-2}.${average:(-2):2}
			unit=" ms"
		else
			average="999999"
			unit=" n/a"
		fi
		if (( counterNotFound == domains_qty )); then
			average="999998"
			unit=" n/a"
		fi
		report+="$line$( printf "%$(( wcol + 1 ))s" "$average" )$unit"$'\n'
	done
	report=${report%$'\n'}
	printf "\\r  %40s\\r" " "

		# sort if no nosort option and command sort
	if [ -z "$nosort" ] && command -v sort > /dev/null; then
		[ "$compress" ] && unset domains_qty 
		report=$( echo "$report" | sort -n -k $(( domains_qty + 3 )) )
	fi

	echo "$header"
	echo "$report"

	if [[ -z "$compress" ]]; then
		echo -en "\\n  tested domains ('$testsarray' list):\\n  "
		i=1
		for domain in "${domains_test[@]}"; do
			footer+=$( echo -n "$i:${domain}" )" "
			(( i++ ))
		done
		footer+=$'\n'"      n/a indicates an inaccessible server, dash (-) indicates a domain not found "
		echo "$footer"
		echo
	fi

	if [ "$export" ]; then
		output="${script}_report.md"
		ligneRapport="Report $(date '+%d/%m/%Y %H:%M %z')  ◇  $(uname -n)  ◇  $0 $script_options  ◇  $version"
		echo "$ligneRapport" > "$output"
		{
			printf "\\n%s\\n" '```'
			echo "$header"
			echo "$report"
			printf "%s\\n" '```'
			[ "$footer" ] && echo "$footer"
		} >> "$output"
		printf "%s \\n\\n" "report url:"
		curl -s --upload-file "$output" "https://transfer.sh/$output"
		echo
		echo "voir le rapport généré: pager $output"
		echo "effacer le rapport généré: rm $output"
	fi
}


#######  variables  script -----------------------------------------------------

url_script="https://framagit.org/sdeb/nstest/raw/master/nstest"
url_notice="https://framaclic.org/h/doc-nstest"		# https://framagit.org/sdeb/nstest/blob/master/README.md

#######  options processing ----------------------------------------------------

f__basedirname
usage_version
testsarray="base"
script_options="$*"
td=( base alt easy atld )
	# options
while (( $# )) ; do
	case "$1" in
		     --bench    ) totest=( "${td[@]}" ) ; bench='yes' ;;
			 --dev      ) url_script=${url_script//\/master\//dev} ;;
		     --drill    ) drilltest='yes'  ;;
		-e | --export   ) export='yes'     ;;
		-c | --compress ) compress='yes'   ;;
		-d | --domains  ) testsarray="$2" ; shift
			case "$testsarray" in 
				alt | atld | base | easy) ;; 
				* ) echo '  test domains: base selected'; testsarray="base" ;;
			esac ;;
		-f | --file     ) dnsfile="$2"    ; shift ;;
		     --nodns    ) nodns='yes'      ;;
		     --noresolv ) noresolv='yes'   ;;
		     --nosort   ) nosort='yes'     ;;
		* ) options+=( "$1" )
	esac
	shift
done
(( "${#totest[@]}" == 0 )) && totest=( "$testsarray" )
	# actions
for i in "${options[@]}" ; do
	case "$i" in
		--opt )	assign_variables
				for ns in "${dns[@]}"; do ip=${ns% #*}; ns=${ns#*# }; echo "$ns ( $ip )   "; done; echo
				for test in "${td[@]}"; do
					testsarray="$test"; assign_variables; unset domains
					for domain in "${domains_test[@]}"; do domains+="$domain | "; done
					echo "list $test: ${domains::-2}"
				done
			exit ;;
		-u | --upgrade )   script_upgrade   ; exit ;;
		-v | --version )   script_get_version; exit ;;
		-h | --help | * ) usage ; exit ;;
	esac
done


####  script core -----------------------------------------------------------

for list in "${totest[@]}"; do
	testsarray="$list"
	getTime
	z_core
	echo -n "  execution time: "
	echo -en "$( getTime end:auto )\\t ($( date '+%d/%m/%Y %H:%M %z' ))\\n"
	echo
	[ "$bench" ] && sleep 30s
done

exit O
### END CONTROL (download control)

curl -OL https://framaclic.org/h/nstest
wget -nv -O nstest https://framaclic.org/h/nstest
chmod +x nstest && ./nstest

https://framagit.org/sdeb/nstest/raw/master/nstest
